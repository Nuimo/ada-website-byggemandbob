---
layout: default
execute:
  echo: FALSE
---

```{python, echo=FALSE}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
import seaborn as sns
import statsmodels.api as sm
import warnings
warnings.filterwarnings('ignore')
```

```{python, echo=FALSE}
movie_metadata = pd.read_csv('../data_cleaned/movie_cleaned.csv', lineterminator='\n')
character_metadata = pd.read_csv('../data_cleaned/character_cleaned.csv')
```

# Data cleaning

Taking a first look at the data set, we see that only around 10% of the movies have a box office revenue entry. Therefore we enrich the data set with TMDB data (<mark>kilde</mark>). The TMDB data gives us new attributes like revenue, original movie language and movie ranking, that might be interesting for out analysis. After enriching the data, <mark>hvor meget??</mark>% of the movies have a box office revenue entry.

Before diving into the data, it needs to be cleaned. Some of the movies have a runtime of 10 hours, or an actor with the height of 3 meters. All of these unrealistic attributes is removed, before continuing with the data.

## How has movie revenue developed over time?

Let's first take a look at out variable of intereset: **Movie box office revenue**. The left plot below shows, that very few movies have a very high revenue - and a lot of movie have a much lower revenue. This is called a **power law**, and to fix this, we log-transform this variable.

<mark>er det overhovedet relevant?</mark>


```{python, echo=FALSE}
box_office_variables = ['Movie box office revenue', 'log Movie box office revenue']

fig, axes = plt.subplots(1, 2, figsize=(8, 5))

# Create histograms for each variable in each subplot
for i, variable in enumerate(box_office_variables):
    ax = axes[i]

    # Create histograms for female and male characters for the current variable
    sns.histplot(data=movie_metadata, x=variable, ax=ax, bins=20)

    ax.set_xlabel(variable)
    ax.set_ylabel('Frequency')
    ax.set_title(variable)

# Adjust the layout to prevent overlapping
plt.tight_layout()
plt.show()
```



### Distribution
