---
layout: default
execute:
  echo: FALSE
---

```{python, echo=FALSE}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
import seaborn as sns
import statsmodels.api as sm
import warnings
warnings.filterwarnings('ignore')
```

```{python, echo=FALSE}
movie_metadata = pd.read_csv('../data_cleaned/movie_cleaned.csv', lineterminator='\n')
character_metadata = pd.read_csv('../data_cleaned/character_cleaned.csv')
```

## How does gender representation influence movie revenue?

Let first take a look at the representation of male and female actors in movies over time.

```{python}
# Divide data set into male and female data set

female_characters = character_metadata[character_metadata['Actor gender'] == 'F']
male_characters = character_metadata[character_metadata['Actor gender'] == 'M']

gender_counts = character_metadata.groupby(['Movie release year', 'Actor gender']).size().reset_index(name='Count')

# Plot using Seaborn
plt.figure(figsize=(8, 5))
sns.lineplot(data=gender_counts, x='Movie release year', y='Count', hue='Actor gender')
plt.title('Number of female and male actors in movies released in the years 1888 to 2016')
plt.xlabel('Movie release year')
plt.ylabel('Count')
plt.legend(title='Actor gender')
plt.show()
```

There is a trend over all years, that there are more male actors than female actors in movies. But has there been not change in the last century?

Since there is only very few movies in the tails of the data set, we look at the progression of female characters from year 1940 to 2012.

```{python}
# Count number of female in each movie
female_count = female_characters.groupby('Wikipedia Movie ID').size()
male_count = male_characters.groupby('Wikipedia Movie ID').size()

# Ensure that all Wikipedia Movie IDs in 'female_count' are represented in 'male_count'
# Fill missing values with 0
male_count = male_count.reindex(female_count.index, fill_value=0)

# Calculate the percentage of female characters
percentage_female = (female_count / (female_count + male_count)) * 100

# Reset the index to have 'Wikipedia Movie ID' as a column
percentage_female = percentage_female.reset_index()

# Rename the columns for clarity
percentage_female.columns = ['Wikipedia Movie ID', 'Percentage female characters']

# Merge dataframes
percentage_female_with_year = pd.merge(percentage_female, movie_metadata, on='Wikipedia Movie ID', how='left')

# Calculate female percentage pr. year and make into a data frame with column 'Movie release year' and 'Percentage female characters'
percentage_female_per_year = percentage_female_with_year.groupby('Movie release year')['Percentage female characters'].mean()
percentage_female_per_year = percentage_female_per_year.reset_index(name="Percentage female characters")
percentage_female_per_year['Movie release year'] = pd.to_numeric(percentage_female_per_year['Movie release year'], errors='coerce').astype(float)

# Drop missing values
percentage_female_per_year = percentage_female_per_year.dropna()

condition = (percentage_female_per_year['Movie release year'] < 1940) | (percentage_female_per_year['Movie release year'] > 2012)
percentage_female_per_year_filtered = percentage_female_per_year
percentage_female_per_year_filtered.loc[condition, 'Movie release year'] = np.nan
percentage_female_per_year_filtered = percentage_female_per_year_filtered.dropna()

sns.lmplot(x='Movie release year', y="Percentage female characters", data=percentage_female_per_year_filtered)

# Perform linear regression
X = percentage_female_per_year_filtered['Movie release year']
X = sm.add_constant(X)  # Add an intercept term
y = percentage_female_per_year_filtered["Percentage female characters"]

model = sm.OLS(y, X).fit()


plt.title('Percentage of female character in movie from year 1940 to 2012')
plt.show()
```

As the plot shows, there is has been a significant increase in female actors in the past century. But does gender even effect the box office revenue of the movie? Let's dive into that.

```{python}
# Define dataframe with 'log Movie box office revenue' and 'Percentage female characters'
percentage_female_with_log_rev = percentage_female_with_year[['log Movie box office revenue', 'Percentage female characters']].dropna()

# Create a scatterplot with a regression line
sns.lmplot(x="Percentage female characters", y="log Movie box office revenue", data=percentage_female_with_log_rev, line_kws={'color': 'orange'})

# Perform linear regression
X = percentage_female_with_log_rev["Percentage female characters"]
X = sm.add_constant(X)  # Add an intercept term
y = percentage_female_with_log_rev["log Movie box office revenue"]

model = sm.OLS(y, X).fit()


plt.title('log Movie box of revenue as a function of percentage of female actors in a movie')
plt.show()

```

This plot above shows, that there is a significant decrease in the box office revenue for a movie, if there are more female actors.


### Difference between male and female actors

We divide the character dataset into male and female character dataset, and use box plots and histograms to look at the distribution on the attributes. We also perform a t-test for each of the attributes with the nul-hypothesis: there is no difference between male and female.

```{python}
# Variables of interest
variables = ['Movie release year', 'Actor age at movie release']

# Create a figure with four subplots
fig, axes = plt.subplots(1, 2, figsize=(7, 3))

# Create box plots for each variable in each subplot
for i, variable in enumerate(variables):
    ax = axes[i]

    # Use sns.boxplot with 'Actor gender' as 'hue'
    sns.boxplot(x='Actor gender', y=variable, data=character_metadata, ax=ax)

    # Perform a t-test and get the p-value
    female_data = character_metadata[character_metadata['Actor gender'] == 'F'][variable].dropna()
    male_data = character_metadata[character_metadata['Actor gender'] == 'M'][variable].dropna()
    t_stat, p_value = stats.ttest_ind(female_data, male_data)

    # Annotate the plot with the p-value
    ax.annotate(f'p-value: {p_value:.4f}', xy=(0.5, max(ax.get_ylim())), ha='center', va='center',
                bbox=dict(boxstyle="round", alpha=0.1),
                fontsize=8, color='black')

    ax.set_ylabel('Values')
    ax.set_title(variable)

# Adjust the layout to prevent overlapping
plt.tight_layout()
plt.show()
```

The left plot show us, that there is a significant difference in release year of the movie, where female actors are more represented in recent years. We might want to log-transform these attributes, if they are used in further analysis.<mark>ikke relevant?</mark>

The right box plot shows us, that there is a significant difference in the age of male and female actors. It indicates, that female actors generally are younger than male actors in movies.

We also look at the distributions with a histogram: <mark>vælg én</mark>

```{python, echo=FALSE}
# Variables of interest
variables = ['Movie release year', 'Actor age at movie release']

# Create a figure with four subplots (one for each variable)
fig, axes = plt.subplots(1, 2, figsize=(8, 3))

# Create histograms for each variable in each subplot
for i, variable in enumerate(variables):
    ax = axes[i]

    # Create histograms for female and male characters for the current variable
    sns.histplot(data=character_metadata, x=variable, bins=20, alpha=0.5, hue='Actor gender', multiple='layer', ax=ax)

    ax.set_xlabel(variable)
    ax.set_ylabel('Frequency')
    ax.set_title(variable)

# Adjust the layout to prevent overlapping
plt.tight_layout()
plt.show()
```
